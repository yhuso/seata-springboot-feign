def artifactId = 'account-server'

springBoot {
    mainClassName = "com.aha.tech.Application"
}

dependencyManagement {
    imports {
        mavenBom 'com.tech.base.support:spring-cloud-base-bom:0.0.3-RELEASE'
    }
}

bootJar {
    baseName = "$artifactId"
}
tasks.withType(Jar) {
    destinationDir = file("../build/libs")
}

install {
    repositories.mavenInstaller {
        pom.version = "$project.version"
        pom.artifactId = "$artifactId"
        pom.groupId = "$project.group"
    }
}

configurations {
    mybatisGenerator
}

dependencies {

    compile("hikari-cp:hikari-cp")
    compile('mysql:mysql-connector-java:5.1.21')

    compile("tk.mybatis:mapper-spring-boot-starter")
    compile("com.tech.base.support:prefix-base-commons:0.0.3")

    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-autoconfigure', version: '2.1.2'


    // test dependency
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.mybatis.generator:mybatis-generator-core:1.3.7")
    testCompile("tk.mybatis:mapper-generator:1.1.5")


    // junit
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.2.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.2.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.2.0'
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.2.0'


    mybatisGenerator('org.mybatis.generator:mybatis-generator-core:1.3.2')
    mybatisGenerator('mysql:mysql-connector-java:5.1.21')
    mybatisGenerator('tk.mybatis:mapper:3.3.1')
}

//def getDbProperties = {
//    def properties = new Properties()
//    file("/Users/bianjie/gitproject4/jinlin-order/account-server/src/main/resources/mybatis/mysql.properties").withInputStream { inputStream ->
//        properties.load(inputStream)
//    }
//    properties
//}
//
//task mybatisGenerate << {
//    def properties = getDbProperties()
//    ant.properties['targetProject'] = projectDir.path
//    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
//    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
//    ant.properties['userId'] = properties.getProperty("jdbc.user")
//    ant.properties['password'] = properties.getProperty("jdbc.pass")
//    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
//    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
//    ant.properties['modelPackage'] = properties.getProperty("modelPackage")
//    ant.properties['mapperPackage'] = properties.getProperty("mapperPackage")
//    ant.properties['sqlMapperPackage'] = properties.getProperty("sqlMapperPackage")
//    ant.taskdef(
//            name: 'mbgenerator',
//            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
//            classpath: configurations.mybatisGenerator.asPath
//    )
//    ant.mbgenerator(overwrite: true,
//            configfile: '/Users/bianjie/gitproject4/jinlin-order/account-server/src/main/resources/mybatis/generator.xml', verbose: true) {
//        propertyset {
//            propertyref(name: 'targetProject')
//            propertyref(name: 'userId')
//            propertyref(name: 'driverClass')
//            propertyref(name: 'connectionURL')
//            propertyref(name: 'password')
//            propertyref(name: 'src_main_java')
//            propertyref(name: 'src_main_resources')
//            propertyref(name: 'modelPackage')
//            propertyref(name: 'mapperPackage')
//            propertyref(name: 'sqlMapperPackage')
//        }
//    }
//}
